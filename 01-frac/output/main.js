!function(e){"use strict";function t(){const e=()=>{const e=new Date;return e.getMilliseconds/1e3+e.getSeconds()+60*e.getMinutes};return this.responce=(t=null)=>{let n=e();this.globalTime=n,this.globalDeltaTime=n-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=n-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=n-this.pauseTime-this.startTime),this.frameCounter++,n-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(n-this.oldTimeFPS),this.oldTimeFPS=n,this.frameCounter=0,null!=t&&(document.getElementById(t).innerHTML=this.getFPS())),this.oldTime=n},this.getFPS=()=>this.FPS.toFixed(3),this.globalTime=this.localTime=e(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}let n,i,o,r,s,a={x:0,y:0,scale:1},l=!1;function c(){!function(){n=document.getElementById("myCan"),i=n.getContext("webgl2"),i.clearColor(.3,.47,.8,1);let e="#version 300 es\n  precision highp float;\n  in vec3 InPosition;\n    \n  out vec2 DrawPos;\n  uniform float Time;\n \n  void main( void )\n  {\n    gl_Position = vec4(InPosition, 1);\n    DrawPos = InPosition.xy;\n  }\n  ",t="#version 300 es\n  precision highp float;\n\n  out vec4 OutColor;\n  \n  in vec2 DrawPos;\n  uniform float Time;\n  uniform vec3 Mouse;\n\n  vec2 Mul( vec2 Z1, vec2 Z2 )\n  {\n    return vec2(Z1.x * Z2.x - Z1.y * Z2.y, Z1.x * Z2.y + Z2.x * Z1.y);\n  }\n \n  void main( void )\n  {\n    float n = 0.0;\n    vec2 Z = (DrawPos + Mouse.xy) / Mouse.z;\n    \n    while(n < 255.0 && Z.x * Z.x + Z.y * Z.y < 4.0)\n    {\n      Z = Mul(Z, Z) + vec2(sin(Time) / 6.0, tan(Time) * sin(Time) / 1.5);\n      n += 1.0;\n    }\n\n    OutColor = vec4(n / 255.0, n / 510.0, 2.0 * n / 255.0, 1.0);\n  }\n  ",s=m(i.VERTEX_SHADER,e),a=m(i.FRAGMENT_SHADER,t),l=i.createProgram();if(i.attachShader(l,s),i.attachShader(l,a),i.linkProgram(l),!i.getProgramParameter(l,i.LINK_STATUS)){let e=i.getProgramInfoLog(l);console.log("Shader program link fail: "+e)}const c=.99,h=[-c,c,0,-c,-c,0,c,c,0,c,-c,0],u=i.getAttribLocation(l,"InPosition");let d=i.createVertexArray();i.bindVertexArray(d);let T=i.createBuffer();i.bindBuffer(i.ARRAY_BUFFER,T),i.bufferData(i.ARRAY_BUFFER,new Float32Array(h),i.STATIC_DRAW),-1!=u&&(i.vertexAttribPointer(u,3,i.FLOAT,!1,0,0),i.enableVertexAttribArray(u));o=i.getUniformLocation(l,"Time"),r=i.getUniformLocation(l,"Mouse"),i.useProgram(l)}(),n.addEventListener("wheel",(e=>{h(-e.clientX/n.width,e.clientY/n.height,e.deltaY/1e3)})),n.addEventListener("mousemove",(e=>{l&&h(-e.clientX/n.width,e.clientY/n.height,0)})),n.addEventListener("mousedown",(()=>{l=!0})),n.addEventListener("mouseup",(()=>{l=!1})),s=new t,s.responce();const e=()=>{!function(){if(i.clear(i.COLOR_BUFFER_BIT),-1!=o){const e=new Date;let t=60*e.getMinutes()+e.getSeconds()+e.getMilliseconds()/1e3;i.uniform1f(o,t)}-1!=r&&i.uniform3f(r,a.x,a.y,a.scale);i.drawArrays(i.TRIANGLE_STRIP,0,4)}(),s.responce(),document.getElementById("fps").innerHTML=s.getFPS(),window.requestAnimationFrame(e)};e()}function m(e,t){const n=i.createShader(e);if(i.shaderSource(n,t),i.compileShader(n),!i.getShaderParameter(n,i.COMPILE_STATUS)){let e=i.getShaderInfoLog(n);console.log("Shader compile fail: "+e)}return n}function h(e,t,n){a.x=2*e+1,a.y=2*t-1,a.scale+=n}window.addEventListener("load",(()=>{c()})),console.log("CGSG forever!!! mylib.js imported"),e.mouseScroll=h}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
