!function(e){"use strict";function t(){const e=()=>{const e=new Date;return e.getMilliseconds/1e3+e.getSeconds()+60*e.getMinutes};return this.responce=(t=null)=>{let i=e();this.globalTime=i,this.globalDeltaTime=i-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=i-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=i-this.pauseTime-this.startTime),this.frameCounter++,i-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(i-this.oldTimeFPS),this.oldTimeFPS=i,this.frameCounter=0,null!=t&&(document.getElementById(t).innerHTML=this.getFPS())),this.oldTime=i},this.getFPS=()=>this.FPS.toFixed(3),this.globalTime=this.localTime=e(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}let i,n,o,r,s,a={x:0,y:0,scale:1};function l(){!function(){i=document.getElementById("myCan"),n=i.getContext("webgl2"),n.clearColor(.3,.47,.8,1);let e="#version 300 es\n  precision highp float;\n  in vec3 InPosition;\n    \n  out vec2 DrawPos;\n  uniform float Time;\n \n  void main( void )\n  {\n    gl_Position = vec4(InPosition, 1);\n    DrawPos = InPosition.xy;\n  }\n  ",t="#version 300 es\n  precision highp float;\n\n  out vec4 OutColor;\n  \n  in vec2 DrawPos;\n  uniform float Time;\n  uniform vec3 Mouse;\n\n  vec2 Mul( vec2 Z1, vec2 Z2 )\n  {\n    return vec2(Z1.x * Z2.x - Z1.y * Z2.y, Z1.x * Z2.y + Z2.x * Z1.y);\n  }\n \n  void main( void )\n  {\n    float n = 0.0;\n    vec2 Z = (DrawPos + Mouse.xy) / Mouse.z;\n    \n    while(n < 255.0 && Z.x * Z.x + Z.y * Z.y < 4.0)\n    {\n      Z = Mul(Z, Z) + vec2(sin(Time) / 6.0, tan(Time) * sin(Time) / 1.5);\n      n += 1.0;\n    }\n\n    OutColor = vec4(n / 255.0, n / 510.0, 2.0 * n / 255.0, 1.0);\n  }\n  ",s=c(n.VERTEX_SHADER,e),a=c(n.FRAGMENT_SHADER,t),l=n.createProgram();if(n.attachShader(l,s),n.attachShader(l,a),n.linkProgram(l),!n.getProgramParameter(l,n.LINK_STATUS)){let e=n.getProgramInfoLog(l);console.log("Shader program link fail: "+e)}const m=.99,h=[-m,m,0,-m,-m,0,m,m,0,m,-m,0],u=n.getAttribLocation(l,"InPosition");let T=n.createVertexArray();n.bindVertexArray(T);let d=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,d),n.bufferData(n.ARRAY_BUFFER,new Float32Array(h),n.STATIC_DRAW),-1!=u&&(n.vertexAttribPointer(u,3,n.FLOAT,!1,0,0),n.enableVertexAttribArray(u));o=n.getUniformLocation(l,"Time"),r=n.getUniformLocation(l,"Mouse"),n.useProgram(l)}(),s=new t,s.responce();const e=()=>{!function(){if(n.clear(n.COLOR_BUFFER_BIT),-1!=o){const e=new Date;let t=60*e.getMinutes()+e.getSeconds()+e.getMilliseconds()/1e3;n.uniform1f(o,t)}-1!=r&&n.uniform3f(r,a.x,a.y,a.scale);n.drawArrays(n.TRIANGLE_STRIP,0,4)}(),s.responce(),document.getElementById("fps").innerHTML=s.getFPS(),window.requestAnimationFrame(e)};e()}function c(e,t){const i=n.createShader(e);if(n.shaderSource(i,t),n.compileShader(i),!n.getShaderParameter(i,n.COMPILE_STATUS)){let e=n.getShaderInfoLog(i);console.log("Shader compile fail: "+e)}return i}window.addEventListener("load",(()=>{l()})),console.log("CGSG forever!!! mylib.js imported"),e.mouseScroll=function(e,t,i){a.x=2*e+1,a.y=2*t-1,a.scale+=i}}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
