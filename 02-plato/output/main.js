!function(t){"use strict";function s(){const t=()=>{const t=new Date;return t.getMilliseconds/1e3+t.getSeconds()+60*t.getMinutes};return this.responce=(s=null)=>{let i=t();this.globalTime=i,this.globalDeltaTime=i-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=i-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=i-this.pauseTime-this.startTime),this.frameCounter++,i-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(i-this.oldTimeFPS),this.oldTimeFPS=i,this.frameCounter=0,null!=s&&(document.getElementById(s).innerHTML=this.getFPS())),this.oldTime=i},this.getFPS=()=>this.FPS.toFixed(3),this.globalTime=this.localTime=t(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}class i{constructor(t,s){this.name=s,this.index=t.rnd.gl.getUniformBlockIndex(t.prg,s),this.size=t.rnd.gl.getActiveUniformBlockParameter(t.prg,this.index,t.rnd.gl.UNIFORM_BLOCK_DATA_SIZE),this.bind=t.rnd.gl.getActiveUniformBlockParameter(t.prg,this.index,t.rnd.gl.UNIFORM_BLOCK_BINDING),this.buffer=t.rnd.gl.createBuffer(),this.shd=t,t.rnd.gl.bindBuffer(t.rnd.gl.UNIFORM_BUFFER,this.buffer),t.rnd.gl.bufferData(t.rnd.gl.UNIFORM_BUFFER,this.size,t.rnd.gl.DYNAMIC_DRAW),t.rnd.gl.bindBufferBase(t.rnd.gl.UNIFORM_BUFFER,this.bind,this.buffer)}update(t,s){this.shd.rnd.gl.bindBuffer(this.shd.rnd.gl.UNIFORM_BUFFER,this.buffer),this.shd.rnd.gl.bufferSubData(this.shd.rnd.gl.UNIFORM_BUFFER,t,s,0)}}function h(t,s){return new i(t,s)}class m{constructor(t,s){this.rnd=t,this.name=s,this.prg=null,this.attrs=[],this.uniforms=[],this._init(s)}async _init(t){this.shaders=[{id:null,type:this.rnd.gl.VERTEX_SHADER,name:"vert",src:""},{id:null,type:this.rnd.gl.FRAGMENT_SHADER,name:"frag",src:""}];for(const s of this.shaders){let i=await fetch(`bin/shaders/${t}/${s.name}.glsl`),h=await i.text();"string"==typeof h&&""!=h&&(s.src=h)}this.updateShadersSource()}updateShadersSource(){if(this.shaders[0].id=null,this.shaders[1].id=null,this.prg=null,""!=this.shaders[0].src&&""!=this.shaders[1].src){if(this.shaders.forEach((t=>{if(t.id=this.rnd.gl.createShader(t.type),this.rnd.gl.shaderSource(t.id,t.src),this.rnd.gl.compileShader(t.id),!this.rnd.gl.getShaderParameter(t.id,this.rnd.gl.COMPILE_STATUS)){let s=this.rnd.gl.getShaderInfoLog(t.id);console.log(`Shader ${this.name}/${t.name} compile fail: ${s}`)}})),this.prg=this.rnd.gl.createProgram(),this.shaders.forEach((t=>{null!=t.id&&this.rnd.gl.attachShader(this.prg,t.id)})),this.rnd.gl.linkProgram(this.prg),!this.rnd.gl.getProgramParameter(this.prg,this.rnd.gl.LINK_STATUS)){let t=this.rnd.gl.getProgramInfoLog(this.prg);console.log(`Shader program ${this.name} link fail: ${t}`)}this.updateShaderData()}}updateShaderData(){this.uniforms={};const t=this.rnd.gl.getProgramParameter(this.prg,this.rnd.gl.ACTIVE_UNIFORMS);for(let s=0;s<t;s++){const t=this.rnd.gl.getActiveUniform(this.prg,s);this.uniforms[t.name]={name:t.name,type:t.type,size:t.size,loc:this.rnd.gl.getUniformLocation(this.prg,t.name)}}this.attrs={};const s=this.rnd.gl.getProgramParameter(this.prg,this.rnd.gl.ACTIVE_ATTRIBUTES);for(let t=0;t<s;t++){const s=this.rnd.gl.getActiveAttrib(this.prg,t);this.attrs[s.name]={name:s.name,type:s.type,size:s.size,loc:this.rnd.gl.getAttribLocation(this.prg,s.name)}}this.uniformBlocks={};const i=this.rnd.gl.getProgramParameter(this.prg,this.rnd.gl.ACTIVE_UNIFORM_BLOCKS);for(let t=0;t<i;t++){const s=this.rnd.gl.getActiveUniformBlockName(this.prg,t);this.uniformBlocks[s]=h(this,s)}}apply(){return null!=this.prg&&(this.rnd.gl.useProgram(this.prg),!0)}}class e{constructor(t,s,i){if(null==t)return r(0,0,0);"object"==typeof t?3==t.length?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s||null==i?(this.x=t,this.y=t,this.z=t):(this.x=t,this.y=s,this.z=i)}add(t){return null==t?r(this):"number"==typeof t?r(this.x+t,this.y+t,this.z+t):r(this.x+t.x,this.y+t.y,this.z+t.z)}add3(t,s){return this.add(t.add(s))}add4(t,s,i){return this.add(t.add3(s,i))}sub(t){return null==t?r(this):"number"==typeof t?r(this.x-t,this.y-t,this.z-t):r(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?r(this):"number"==typeof t?r(this.x*t,this.y*t,this.z*t):"object"==typeof t?r(this.x*t[0],this.y*t[0],this.z*t[0]):void 0}div(t){return null==t?r(this):"number"==typeof t?r(this.x/t,this.y/t,this.z/t):"object"==typeof t?r(this.x/t[0],this.y/t[0],this.z/t[0]):void 0}neg(){return r(-this.x,-this.y,-this.z)}dot(t){return null==t?this.dot(this):"number"==typeof t?this.x*t+this.y*t+this.z*t:this.x*t.x+this.y*t.y+this.z*t.z}len(){let t=this.dot();return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.len();return 1==t||0==t?r(this):this.div(t)}cross(t){return null==t?r(this):"number"==typeof t?this.cross(r(t)):r(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}transform(t){return r(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2])}mulMatr(t){let s=this.x*t.m[0][3]+this.y*t.m[1][3]+this.z*t.m[2][3]+t.m[3][3];return r(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0]+t.m[3][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1]+t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2]).div(s)}pointTransform(t){return r(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0]+t.m[3][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1]+t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2])}}function r(...t){return new e(...t)}class n{constructor(t){null!=t&&null!=t?"object"==typeof t&&4==t.length?this.m=t:this.m=t.m:this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]}determ(){return this.m[0][0]*a(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*a(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+this.m[0][2]*a(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*a(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}mul(t){let s=o();return s.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],s.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],s.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],s.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],s.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],s.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],s.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],s.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],s.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],s.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],s.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],s.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],s.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],s.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],s.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],s.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],o(s)}mul3(t,s){return this.mul(t.mul(s))}mul4(t,s,i){return this.mul(t.mul3(s,i))}mul5(t,s,i,h){return this.mul(t.mul4(s,i,h))}mul6(t,s,i,h,m){return this.mul(t.mul5(s,i,h,m))}inverse(){let t=o(),s=this.determ();return 0==s||(t.m[0][0]=+a(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t.m[1][0]=-a(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t.m[2][0]=+a(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t.m[3][0]=+a(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t.m[0][1]=+a(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t.m[1][1]=-a(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t.m[2][1]=+a(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t.m[3][1]=+a(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t.m[0][2]=+a(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t.m[1][2]=-a(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t.m[2][2]=+a(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t.m[3][2]=+a(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t.m[0][3]=+a(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/s,t.m[1][3]=-a(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/s,t.m[2][3]=+a(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/s,t.m[3][3]=+a(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/s),t}transpose(){return o([[this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0]],[this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1]],[this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2]],[this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3]]])}}function l(t,s){let i=t*Math.PI/180,h=Math.sin(i),m=Math.cos(i);let e=s.normalize();return o([[m+e.x*e.x*(1-m),e.y*e.x*(1-m)-e.z*h,e.z*e.x*(1-m)+e.y*h,0],[e.x*e.y*(1-m)+e.z*h,m+e.y*e.y*(1-m),e.z*e.y*(1-m)-e.x*h,0],[e.x*e.z*(1-m)-e.y*h,e.y*e.z*(1-m)+e.x*h,m+e.z*e.z*(1-m),0],[0,0,0,1]])}function a(t,s,i,h,m,e,r,n,l){return t*m*l+s*e*r+i*h*n-t*e*n-s*h*l-i*m*r}function o(t){return new n(t)}class d{constructor(t,s,i,h,m){this.projSize=.1,this.projDist=.1,this.farClip=300,this.width=t,this.height=s;let e=this.projSize,r=this.projSize;var n,l,a,d,u,g;t<s?e*=t/s:r*=s/t,this.proj=(n=-e/2,l=e/2,a=-r/2,d=r/2,u=this.projDist,g=this.farClip,o([[2*u/(l-n),0,0,0],[0,2*u/(d-a),0,0],[(l+n)/(l-n),(d+a)/(d-a),-(g+u)/(g-u),-1],[0,0,-2*u*g/(g-u),0]])),this.setPos(i,h,m)}setPos(t,s,i){this.matView=function(t,s,i){let h=s.sub(t).normalize(),m=h.cross(i).normalize(),e=m.cross(h).normalize();return o([[m.x,e.x,-h.x,0],[m.y,e.y,-h.y,0],[m.z,e.z,-h.z,0],[-t.dot(m),-t.dot(e),t.dot(h),1]])}(t,s,i),this.right=r(this.matView.m[0][0],this.matView.m[1][0],this.matView.m[2][0]),this.up=r(this.matView.m[0][1],this.matView.m[1][1],this.matView.m[2][1]),this.dir=r(-this.matView.m[0][2],-this.matView.m[1][2],-this.matView.m[2][2]),this.loc=t,this.at=s,this.matVP=this.matView.mul(this.proj)}}function u(t){return t*Math.PI/180}class g{loadShader(t,s){const i=this.gl.createShader(t);if(this.gl.shaderSource(i,s),this.gl.compileShader(i),!this.gl.getShaderParameter(i,this.gl.COMPILE_STATUS)){let t=this.gl.getShaderInfoLog(i);console.log("Shader compile fail: "+t)}return i}render(){this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.clear(this.gl.DEPTH_BUFFER_BIT)}constructor(t){let i=t.width,h=t.height;this.timer=new s,this.gl=t.getContext("webgl2"),this.gl.enable(this.gl.DEPTH_TEST),this.gl.clearColor(.81,.88,.49,1),this.camera=function(t,s,i,h,m){return new d(t,s,i,h,m)}(i,h,r(5),r(0),r(0,1,0))}}class c{constructor(t,s){this.norm=null==s?r():s,this.pos=t}}class f{_init(t,s,i){let h=[],m=0;this.shd=t,this.verts=s,this.inds=i,this.loaded=!0;let e=function(t,s){let i=t,h=s;for(let t in i)i[t].norm=r();for(let t=0;t<h.length;t+=3){let s=h[t],m=h[t+1],e=h[t+2],r=i[s].pos,n=i[m].pos,l=i[e].pos,a=n.sub(r).cross(l.sub(r)).normalize();i[s].norm=i[s].norm.add(a),i[m].norm=i[m].norm.add(a),i[e].norm=i[e].norm.add(a)}for(let t in i)i[t].norm=i[t].norm.normalize();return{vert:i,inds:h}}(this.verts,this.inds);this.verts=e.vert,this.inds=e.inds;for(let t of s)h[m++]=t.pos.x,h[m++]=t.pos.y,h[m++]=t.pos.z,h[m++]=t.norm.x,h[m++]=t.norm.y,h[m++]=t.norm.z;this.vertexArrayId=t.rnd.gl.createVertexArray(),t.rnd.gl.bindVertexArray(this.vertexArrayId),this.vertexBuffer=t.rnd.gl.createBuffer(),t.rnd.gl.bindBuffer(t.rnd.gl.ARRAY_BUFFER,this.vertexBuffer),t.rnd.gl.bufferData(t.rnd.gl.ARRAY_BUFFER,new Float32Array(h),t.rnd.gl.STATIC_DRAW),null==t.prg&&(this.loaded=!1),null!=t.attrs.InPosition&&null!=t.attrs.InNormal&&(t.rnd.gl.vertexAttribPointer(t.attrs.InPosition.loc,3,t.rnd.gl.FLOAT,!1,24,0),t.rnd.gl.enableVertexAttribArray(t.attrs.InPosition.loc),t.rnd.gl.vertexAttribPointer(t.attrs.InNormal.loc,3,t.rnd.gl.FLOAT,!1,24,12),t.rnd.gl.enableVertexAttribArray(t.attrs.InNormal.loc)),this.IndexBufferId=t.rnd.gl.createBuffer(),t.rnd.gl.bindBuffer(t.rnd.gl.ELEMENT_ARRAY_BUFFER,this.IndexBufferId),t.rnd.gl.bufferData(t.rnd.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(i),t.rnd.gl.STATIC_DRAW),this.numOfElements=i.length,this.world=o()}constructor(t,s,i){this._init(t,s,i)}draw(){null==this.shd.prg||this.loaded||(this._init(this.shd,this.verts,this.inds),this.loaded=!0),this.loaded&&(null!=this.shd.uniformBlocks.Prim&&this.shd.uniformBlocks.Prim.update(0,new Float32Array([].concat(...this.world.mul(this.shd.rnd.camera.matVP).m).concat(...this.world.m))),this.shd.rnd.gl.bindVertexArray(this.vertexArrayId),this.shd.rnd.gl.bindBuffer(this.shd.rnd.gl.ELEMENT_ARRAY_BUFFER,this.IndexBufferId),this.shd.rnd.gl.drawElements(this.shd.rnd.gl.TRIANGLES,this.numOfElements,this.shd.rnd.gl.UNSIGNED_INT,0))}}class p{constructor(t){this.vertexes=[]}setCube(){this.vertexes=[[r(-1,-1,-1),r(-1,1,-1),r(1,1,-1),r(1,-1,-1)],[r(-1,-1,1),r(-1,1,1),r(1,1,1),r(1,-1,1)],[r(-1,-1,-1),r(-1,-1,1),r(-1,1,1),r(-1,1,-1)],[r(1,-1,-1),r(1,-1,1),r(1,1,1),r(1,1,-1)],[r(-1,-1,-1),r(-1,-1,1),r(1,-1,1),r(1,-1,-1)],[r(-1,1,-1),r(-1,1,1),r(1,1,1),r(1,1,-1)]]}setTetra(){let t=Math.sqrt(3),s=r(0,Math.sqrt(2)/t,0),i=r(0,0,t/3),h=r(-.5,0,-t/6),m=r(.5,0,-t/6);this.vertexes=[[h,i,s],[h,m,s],[m,i,s],[i,m,h]]}setOcta(){let t=r(0,Math.sqrt(2)/2,0),s=t.mul(-1),i=r(-.5,0,.5),h=r(-.5,0,-.5),m=r(.5,0,.5),e=r(.5,0,-.5);this.vertexes=[[s,i,m],[s,i,h],[s,h,e],[s,m,e],[t,i,m],[t,i,h],[t,h,e],[t,m,e]]}setIco(){this.vertexes=[];let t=u(72),s=Math.cos(t),i=Math.sin(t),h=Math.cos(2*t),m=Math.sin(2*t),e=r(0,.5+Math.sqrt(1-2*s),0),n=r(1,.5,0),l=r(s,.5,-i),a=r(h,.5,-m),o=r(h,.5,m),d=r(s,.5,i),g=n.mul(-1),c=l.mul(-1),f=a.mul(-1),p=o.mul(-1),y=d.mul(-1),x=e.mul(-1);this.vertexes=[[d,o,e],[o,a,e],[a,l,e],[l,n,e],[n,d,e],[p,n,l],[p,f,n],[f,d,n],[f,c,d],[c,o,d],[c,g,o],[g,a,o],[g,y,a],[y,l,a],[y,p,l],[p,x,f],[f,x,c],[c,x,g],[g,x,y],[y,x,p]]}setDode(){this.vertexes=[];let t=Math.sqrt(50+10*Math.sqrt(5))/10,s=.25*(1+Math.sqrt(5))*Math.sqrt(3),i=2*t*Math.cos(u(36)),h=[],m=[],e=[],n=[],l=Math.sqrt(s*s-t*t),a=Math.sqrt(s*s-i*i);for(let s=0;s<360;s+=72){let o=u(s),d=u(s+36),g=r(t*Math.sin(o),t*Math.cos(o),l),c=r(t*Math.sin(d),t*Math.cos(d),-l),f=r(i*Math.sin(o),i*Math.cos(o),a),p=r(i*Math.sin(d),i*Math.cos(d),-a);h.push(g),m.push(c),e.push(f),n.push(p)}this.vertexes.push(h),this.vertexes.push(m);for(let t=0;t<5;t++){let s=[h[t],e[t],n[t],e[(t+1)%5],h[(t+1)%5]],i=[m[t],n[t],e[t],n[(t+4)%5],m[(t+4)%5]];this.vertexes.push(s),this.vertexes.push(i)}}makePrim(t){let s=[],i=[],h=0;for(let t of this.vertexes){for(let s of t)i.push((m=s,e=r(),new c(m,e)));for(let i=2;i<t.length;i++)s.push(h),s.push(h+i-1),s.push(h+i);h+=t.length}var m,e;return function(t,s,i){return new f(t,s,i)}(t,i,s)}}let y,x,z,T,b;const A=()=>{z.responce(),y.render();const t=new Date;let s=60*t.getMinutes()+t.getSeconds()+t.getMilliseconds()/1e3;x.world=l(60*s,r(1,0,2)),T.apply(),x.draw(y),window.requestAnimationFrame(A)};function I(){var t;t=document.getElementById("Figure"),y=new g(t),z=new s,z.responce(),b=new p,b.setTetra(),T=function(t,s){return new m(t,s)}(y,"default"),x=b.makePrim(T);let i=["cube","tetra","octa","dode","ico"];for(let t of i){let s=document.getElementById(t);s.addEventListener("change",(()=>S(s)))}A()}function S(t){switch(t.value){case"cube":b.setCube(),x=b.makePrim(T);break;case"tetra":b.setTetra(),x=b.makePrim(T);break;case"octa":b.setOcta(),x=b.makePrim(T);break;case"dode":b.setDode(),x=b.makePrim(T);break;case"ico":b.setIco(),x=b.makePrim(T)}}window.addEventListener("load",(()=>{I()})),t.radioChange=S}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
